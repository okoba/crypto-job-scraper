import requests
import pandas as pd
from typing import List, Dict
import os

# CSV file to store jobs
CSV_FILE = "remoteok_crypto_jobs.csv"

# Telegram config
TELEGRAM_TOKEN = "8229353160:AAFO1_c1MkEC40DkF-1nqLo4NOsX6WDXusQ"
CHAT_ID = 6876364187 

def send_telegram_message(message: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }
    try:
        r = requests.post(url, data=payload, timeout=10)
        r.raise_for_status()
        print("Telegram message sent")
    except Exception as e:
        print(f"Failed to send Telegram message: {e}")

def fetch_remoteok_jobs(tag: str = "crypto") -> List[Dict]:
    url = "https://remoteok.com/api"
    headers = {
        "User-Agent": "Mozilla/5.0",
        "Accept": "application/json"
    }
    
    try:
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
    except Exception as e:
        print(f"Request failed: {e}")
        return []
    
    try:  # THIS WAS MISSING PROPER INDENTATION
        data = response.json()
        jobs_data = data[1:]  # skip metadata
    except Exception as e:
        print(f"Failed to parse JSON: {e}")
        return []
    
    jobs = []
    for job in jobs_data:
        job_tags = job.get("tags", [])
        if tag and not any(tag.lower() in t.lower() for t in job_tags):
            continue
        jobs.append({
            "job_id": job.get("id"),
            "title": job.get("position"),
            "company": job.get("company", "Unknown"),
            "location": job.get("location", "Remote"),
            "link": f"https://remoteok.com/remote-jobs/{job.get('slug') or job.get('id')}"
        })
    print(f"Total jobs matched tag '{tag}': {len(jobs)}")
    return jobs

def save_jobs(jobs: List[Dict], filename: str = CSV_FILE) -> List[Dict]:
    if os.path.exists(filename):
        existing_ids = set(pd.read_csv(filename)["job_id"])
    else:
        existing_ids = set()
    
    new_jobs = [job for job in jobs if job["job_id"] not in existing_ids]
    
    if new_jobs:
        df = pd.DataFrame(new_jobs)
        if os.path.exists(filename):
            df_existing = pd.read_csv(filename)
            df = pd.concat([df_existing, df], ignore_index=True)
        df.to_csv(filename, index=False)
        print(f"Saved {len(new_jobs)} new jobs to {filename}")
    
    return new_jobs

if __name__ == "__main__":
    jobs = fetch_remoteok_jobs(tag="crypto")
    if jobs:
        new_jobs = save_jobs(jobs)
        for job in new_jobs:
            send_telegram_message(f"*{job['title']}* | {job['company']} | {job['location']}\n{job['link']}")
    else:
        print("No jobs found.")
